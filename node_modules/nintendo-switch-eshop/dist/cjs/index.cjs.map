{"version":3,"sources":["../../src/lib/getGames/getGamesAmerica.ts","../../src/lib/utils/constants.ts","../../src/lib/utils/utils.ts","../../src/lib/utils/makeURLSearchParams.ts","../../src/lib/getGames/getGamesBrazil.ts","../../src/lib/getGames/getGamesEurope.ts","../../src/lib/getGames/getGamesJapan.ts","../../src/lib/getGames/getQueriedGamesAmerica.ts","../../src/lib/getGames/getQueriedGamesBrazil.ts","../../src/lib/getShops/getShopsAmerica.ts","../../src/lib/other/getShopByCountryCode.ts","../../src/lib/other/getPrices.ts","../../src/lib/getShops/getShopsAsia.ts","../../src/lib/getShops/getShopsEurope.ts","../../src/lib/getShops/getActiveShops.ts","../../src/lib/other/parseGameCode.ts","../../src/lib/other/parseNSUID.ts"],"names":["Region","fetch","FetchResultTypes","Result","regions"],"mappings":"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","sourcesContent":["import { fetch, FetchResultTypes } from '@sapphire/fetch';\nimport { Result } from '@sapphire/result';\nimport { US_ALGOLIA_HEADERS, US_GET_GAMES_URL } from '../utils/constants';\nimport type { AlgoliaResponse, GameUS } from '../utils/interfaces';\nimport { arrayRemoveDuplicates, EshopError } from '../utils/utils';\nimport { makeURLSearchParams } from '../utils/makeURLSearchParams';\n\n/**\n * Fetches all games on american e-shops\n *\n * @remarks\n * Currently ONLY returns all games in the e-shop\n *\n * @returns Promise containing all the games\n */\nexport async function getGamesAmerica(): Promise<GameUS[]> {\n\tconst page = 0;\n\n\tconst baseParameters: Omit<ParamsObject, 'facetFilters'> = {\n\t\thitsPerPage: US_GAME_LIST_LIMIT,\n\t\tpage,\n\t\tanalytics: false,\n\t\tfacets: US_FACETS\n\t};\n\n\tconst requests: Request[] = [];\n\n\tfor (const rating of US_ESRB_RATINGS_FILTERS) {\n\t\trequests.push(\n\t\t\t{\n\t\t\t\tindexName: US_INDEX_TITLE_ASC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${US_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexName: US_INDEX_TITLE_DESC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${US_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t}\n\t\t);\n\t}\n\n\tfor (const rating of US_AVAILABILITY_FILTER) {\n\t\trequests.push(\n\t\t\t{\n\t\t\t\tindexName: US_INDEX_TITLE_ASC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${US_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexName: US_INDEX_TITLE_DESC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${US_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t}\n\t\t);\n\t}\n\n\tfor (const rating of US_COMMON_GAME_FRANCHISES) {\n\t\trequests.push(\n\t\t\t{\n\t\t\t\tindexName: US_INDEX_TITLE_ASC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${US_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexName: US_INDEX_TITLE_DESC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${US_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t}\n\t\t);\n\t}\n\n\tconst requestOptions = {\n\t\tbody: JSON.stringify({\n\t\t\trequests\n\t\t}),\n\t\tmethod: 'POST',\n\t\theaders: US_ALGOLIA_HEADERS\n\t};\n\n\tconst gamesResponse = await Result.fromAsync(fetch<AlgoliaResponse>(US_GET_GAMES_URL, requestOptions, FetchResultTypes.JSON));\n\n\tif (gamesResponse.isErr()) {\n\t\tthrow new EshopError('Fetching of US Games failed');\n\t}\n\n\tlet allGames: any[] | PromiseLike<GameUS[]> = [];\n\tfor (const results of gamesResponse.unwrap().results) {\n\t\tallGames = allGames.concat(results.hits);\n\t}\n\n\tallGames = arrayRemoveDuplicates(allGames, 'slug');\n\treturn allGames;\n}\n\ninterface Request {\n\tindexName: string;\n\tparams: string;\n}\n\ninterface ParamsObject {\n\thitsPerPage: number;\n\tpage: number;\n\tanalytics: boolean;\n\tfacets: string;\n\tfacetFilters: string;\n}\n\n/** @internal The maximum number of entries that Nintendo lets us get in 1 request for US games */\nconst US_GAME_LIST_LIMIT = 1000;\n\n/** @internal Index names for querying all games by ascending title */\nconst US_INDEX_TITLE_ASC = 'ncom_game_en_us_title_asc';\n\n/** @internal Index names for querying all games by descending title */\nconst US_INDEX_TITLE_DESC = 'ncom_game_en_us_title_des';\n\n/** @internal Static query parameters for facets/filters in US Algolia calls */\nconst US_FACETS = JSON.stringify([\n\t'generalFilters',\n\t'platform',\n\t'availability',\n\t'genres',\n\t'howToShop',\n\t'virtualConsole',\n\t'franchises',\n\t'priceRange',\n\t'esrbRating',\n\t'playerFilters'\n]);\n\n/** @internal */\nconst US_PLATFORM_FACET_FILTER = 'platform:Nintendo Switch';\n\n/** @internal ESRB options for querying all games in one request */\nconst US_ESRB_RATINGS_FILTERS = ['esrbRating:Everyone', 'esrbRating:Everyone 10+', 'esrbRating:Teen', 'esrbRating:Mature'];\n\n/** @internal Availability filters for querying all games in one request */\nconst US_AVAILABILITY_FILTER = ['availability:Pre-order', 'availability:Coming soon', 'availability:Available now'];\n\n/** @internal Common franchises for querying all games in one request */\nconst US_COMMON_GAME_FRANCHISES = ['franchises:Mario', 'franchises:Zelda', 'franchises:Pokémon', 'franchises:Kirby'];\n","/** Algolia ID for getting US games */\nexport const US_ALGOLIA_ID = 'U3B6GR4UA3';\n\n/** Algolia Key for getting US games */\nexport const US_ALGOLIA_KEY = 'c4da8be7fd29f0f5bfa42920b0a99dc7';\n\n/** Algolia key for getting US games with a query */\nexport const QUERIED_US_ALGOLIA_KEY_NEW = 'a29c6927638bfd8cee23993e51e721c9';\n\n/** Algolia key for getting US games with a query */\nexport const QUERIED_US_ALGOLIA_KEY_OLD = '6efbfb0f8f80defc44895018caf77504';\n\n/** URL for getting US Games */\nexport const US_GET_GAMES_URL = `https://${US_ALGOLIA_ID}-dsn.algolia.net/1/indexes/*/queries`;\n\n/** New URL for getting Queried US Games */\nexport const QUERIED_US_GET_GAMES_URL_NEW = `https://${US_ALGOLIA_ID}-dsn.algolia.net/1/indexes/store_all_products_en_us/query`;\n\n/** Old URL for getting Queried US games, this still exists and has additional properties which get merged with those from the new URL */\nexport const QUERIED_US_GET_GAMES_URL_OLD = `https://${US_ALGOLIA_ID}-dsn.algolia.net/1/indexes/ncom_game_en_us/query`;\n\n/**\n * Sample game code for US store\n * @internal\n */\nexport const US_GAME_CHECK_CODE = '70010000000185';\n\n/**\n * Regex for US game codes\n * @internal\n */\nexport const US_GAME_CODE_REGEX = /HAC\\w(\\w{4})/;\n\n/** @internal Request headers for US games */\nexport const US_ALGOLIA_HEADERS = {\n\t'Content-Type': 'application/json',\n\t'X-Algolia-API-Key': US_ALGOLIA_KEY,\n\t'X-Algolia-Application-Id': US_ALGOLIA_ID\n};\n\n/**\n * Options used for getting EU games\n * @internal\n */\nexport const EU_GET_GAMES_OPTIONS = {\n\tfq: 'type:GAME AND system_type:nintendoswitch* AND product_code_txt:*',\n\tq: '*',\n\tsort: 'sorting_title asc',\n\tstart: '0',\n\twt: 'json'\n};\n\n/** URL for getting EU Games */\nexport const EU_GET_GAMES_URL = 'http://search.nintendo-europe.com/{locale}/select';\n\n/**\n * Sample game code for EU store\n * @internal\n */\nexport const EU_GAME_CHECK_CODE = '70010000000184';\n\n/**\n * Regex for EU game codes\n * @internal\n */\nexport const EU_GAME_CODE_REGEX = /HAC\\w(\\w{4})/;\n\n/**\n * Default locale when getting EU games - defaults to `en`\n * @internal\n */\nexport const EU_DEFAULT_LOCALE = 'en';\n\n/**\n * Default limit used when getting EU games - defaults to `9999`\n * @internal\n */\nexport const EU_GAME_LIST_LIMIT = 9999;\n\n/** URL for getting JP Games */\nexport const JP_GET_GAMES_URL = 'https://www.nintendo.co.jp/data/software/xml/switch.xml';\n\n/**\n * Sample game code for JP store\n * @internal\n */\nexport const JP_GAME_CHECK_CODE = '70010000000039';\n\n/**\n * Regex for JP game codes\n * @internal\n */\nexport const JP_GAME_CODE_REGEX = /HAC(\\w{4})/;\n\n/**\n * Regex for JP NSUID\n * @internal\n */\nexport const JP_NSUID_REGEX = /\\d{14}/;\n\n/** Algolia ID for getting BR games */\nexport const BR_ALGOLIA_ID = 'U3B6GR4UA3';\n\n/** Algolia Key for getting US games */\nexport const BR_ALGOLIA_KEY = 'c4da8be7fd29f0f5bfa42920b0a99dc7';\n\n/** Algolia key for getting BR games with a query */\nexport const QUERIED_BR_ALGOLIA_KEY = 'c4da8be7fd29f0f5bfa42920b0a99dc7';\n\n/** URL for getting BR Games */\nexport const BR_GET_GAMES_URL = `https://${BR_ALGOLIA_ID}-dsn.algolia.net/1/indexes/*/queries`;\n\n/** URL for getting Queried BR Games */\nexport const QUERIED_BR_GET_GAMES_URL = `https://${BR_ALGOLIA_ID}-dsn.algolia.net/1/indexes/ncom_game_pt_br/query`;\n\n/** @internal Request headers for BR games */\nexport const BR_ALGOLIA_HEADERS = {\n\t'Content-Type': 'application/json',\n\t'X-Algolia-API-Key': BR_ALGOLIA_KEY,\n\t'X-Algolia-Application-Id': BR_ALGOLIA_ID\n};\n\n/** URL for getting game prices */\nexport const PRICE_GET_URL = 'https://api.ec.nintendo.com/v1/price';\n\n/**\n * Options for getting Price data\n * @internal\n */\nexport const PRICE_GET_OPTIONS = { lang: 'en' };\n\n/**\n * Default limit used when getting price data - defaults to `50`\n * @internal\n */\nexport const PRICE_LIST_LIMIT = 50;\n\n/**\n * Predefined options for the unit system\n */\nexport const enum Region {\n\tAMERICAS = 1,\n\tEUROPE = 2,\n\tASIA = 3\n}\n","/**\n * Removed duplicates from an array\n *\n * @param array The input array\n * @param property The property to check\n * @private\n */\nexport const arrayRemoveDuplicates = (array: any[], property: string) => {\n\tconst index: any[] = [];\n\n\treturn array.filter((item) => {\n\t\tconst key = property ? item[property] : item;\n\n\t\treturn index.includes(key) ? false : index.push(key);\n\t});\n};\n\n/** Class representing an error in the nintendo-switch-eshop library */\nexport class EshopError extends Error {\n\t/**\n\t * Create an EshopError\n\t * @param message The message the error should show\n\t */\n\tpublic constructor(message: string) {\n\t\tsuper(message);\n\t\tthis.message = message;\n\t\tthis.name = 'EshopError';\n\t}\n}\n","/**\n * Serializes a value to a string, or returns null if it cannot be serialized.\n * @param value - The value to serialize\n * @returns The serialized value, or null if it cannot be serialized\n *\n * @license Apache-2.0\n * @copyright 2021 Noel Buechler\n * Retrieved on 2024-04-27 from https://github.com/discordjs/discord.js/blob/4ad285804bfd72b157139dde61c3fd8ac2544322/packages/rest/src/lib/utils/utils.ts#L8-L47\n */\nfunction serializeSearchParam(value: unknown): string | null {\n\tswitch (typeof value) {\n\t\tcase 'string':\n\t\t\treturn value;\n\t\tcase 'number':\n\t\tcase 'bigint':\n\t\tcase 'boolean':\n\t\t\treturn value.toString();\n\t\tcase 'object':\n\t\t\tif (value === null) return null;\n\t\t\tif (value instanceof Date) {\n\t\t\t\treturn Number.isNaN(value.getTime()) ? null : value.toISOString();\n\t\t\t}\n\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-base-to-string\n\t\t\tif (typeof value.toString === 'function' && value.toString !== Object.prototype.toString) return value.toString();\n\t\t\treturn null;\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Creates and populates an URLSearchParams instance from an object, stripping\n * out null and undefined values, while also coercing non-strings to strings.\n *\n * @param options - The options to use\n * @returns A populated URLSearchParams instance\n *\n * @license Apache-2.0\n * @copyright 2021 Noel Buechler\n * Retrieved on 2024-04-27 from https://github.com/discordjs/discord.js/blob/4ad285804bfd72b157139dde61c3fd8ac2544322/packages/rest/src/lib/utils/utils.ts#L8-L47\n */\nexport function makeURLSearchParams<OptionsType extends object>(options?: Readonly<OptionsType>) {\n\tconst params = new URLSearchParams();\n\tif (!options) return params;\n\n\tfor (const [key, value] of Object.entries(options)) {\n\t\tconst serialized = serializeSearchParam(value);\n\t\tif (serialized !== null) params.append(key, serialized);\n\t}\n\n\treturn params;\n}\n","import { fetch, FetchResultTypes } from '@sapphire/fetch';\nimport { Result } from '@sapphire/result';\nimport { BR_ALGOLIA_HEADERS, BR_GET_GAMES_URL } from '../utils/constants';\nimport type { AlgoliaResponse, GameUS } from '../utils/interfaces';\nimport { arrayRemoveDuplicates, EshopError } from '../utils/utils';\nimport { makeURLSearchParams } from '../utils/makeURLSearchParams';\n\n/**\n * Fetches all games on brazilian e-shop\n *\n * @remarks\n * Currently ONLY returns all games in the e-shop\n *\n * @returns Promise containing all the games\n */\nexport async function getGamesBrazil(): Promise<GameUS[]> {\n\tconst page = 0;\n\n\tconst baseParameters: Omit<ParamsObject, 'facetFilters'> = {\n\t\thitsPerPage: BR_GAME_LIST_LIMIT,\n\t\tpage,\n\t\tanalytics: false,\n\t\tfacets: BR_FACETS\n\t};\n\n\tconst requests: Request[] = [];\n\n\tfor (const rating of BR_ESRB_RATINGS_FILTERS) {\n\t\trequests.push(\n\t\t\t{\n\t\t\t\tindexName: BR_INDEX_TITLE_ASC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${BR_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexName: BR_INDEX_TITLE_DESC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${BR_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t}\n\t\t);\n\t}\n\n\tfor (const rating of BR_AVAILABILITY_FILTER) {\n\t\trequests.push(\n\t\t\t{\n\t\t\t\tindexName: BR_INDEX_TITLE_ASC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${BR_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexName: BR_INDEX_TITLE_DESC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${BR_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t}\n\t\t);\n\t}\n\n\tfor (const rating of BR_COMMON_GAME_FRANCHISES) {\n\t\trequests.push(\n\t\t\t{\n\t\t\t\tindexName: BR_INDEX_TITLE_ASC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${BR_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexName: BR_INDEX_TITLE_DESC,\n\t\t\t\tparams: makeURLSearchParams({ ...baseParameters, facetFilters: `[[\"${rating}\"],[\"${BR_PLATFORM_FACET_FILTER}\"]]` }).toString()\n\t\t\t}\n\t\t);\n\t}\n\n\tconst requestOptions = {\n\t\tbody: JSON.stringify({\n\t\t\trequests\n\t\t}),\n\t\tmethod: 'POST',\n\t\theaders: BR_ALGOLIA_HEADERS\n\t};\n\n\tconst gamesResponse = await Result.fromAsync(fetch<AlgoliaResponse>(BR_GET_GAMES_URL, requestOptions, FetchResultTypes.JSON));\n\n\tif (gamesResponse.isErr()) {\n\t\tthrow new EshopError('Fetching of BR Games failed');\n\t}\n\n\tlet allGames: any[] | PromiseLike<GameUS[]> = [];\n\tfor (const results of gamesResponse.unwrap().results) {\n\t\tallGames = allGames.concat(results.hits);\n\t}\n\n\tallGames = arrayRemoveDuplicates(allGames, 'slug');\n\treturn allGames;\n}\n\ninterface Request {\n\tindexName: string;\n\tparams: string;\n}\n\ninterface ParamsObject {\n\thitsPerPage: number;\n\tpage: number;\n\tanalytics: boolean;\n\tfacets: string;\n\tfacetFilters: string;\n}\n\n/** @internal The maximum number of entries that Nintendo lets us get in 1 request for US games */\nconst BR_GAME_LIST_LIMIT = 499;\n\n/** @internal Index names for querying all games by ascending title */\nconst BR_INDEX_TITLE_ASC = 'ncom_game_pt_br_title_asc';\n\n/** @internal Index names for querying all games by descending title */\nconst BR_INDEX_TITLE_DESC = 'ncom_game_pt_br_title_des';\n\n/** @internal Static query parameters for facets/filters in US Algolia calls */\nconst BR_FACETS = JSON.stringify([\n\t'generalFilters',\n\t'platform',\n\t'availability',\n\t'genres',\n\t'howToShop',\n\t'virtualConsole',\n\t'franchises',\n\t'priceRange',\n\t'esrbRating',\n\t'playerFilters'\n]);\n\n/** @internal */\nconst BR_PLATFORM_FACET_FILTER = 'platform:Nintendo Switch';\n\n/** @internal ESRB options for querying all games in one request */\nconst BR_ESRB_RATINGS_FILTERS = [\n\t'esrbRating:Livre',\n\t'esrbRating:10',\n\t'esrbRating:12',\n\t'esrbRating:14',\n\t'esrbRating:16',\n\t'esrbRating:18',\n\t'esrbRating:Check the rating',\n\t'esrbRating:L'\n];\n\n/** @internal Availability filters for querying all games in one request */\nconst BR_AVAILABILITY_FILTER = ['availability:Pre-order', 'availability:Coming soon', 'availability:Available now', 'availability:New releases'];\n\n/** @internal Common franchises for querying all games in one request */\nconst BR_COMMON_GAME_FRANCHISES = ['franchises:Mario', 'franchises:Zelda', 'franchises:Pokémon', 'franchises:Kirby'];\n","import { fetch, FetchResultTypes } from '@sapphire/fetch';\nimport { Result } from '@sapphire/result';\nimport { EU_DEFAULT_LOCALE, EU_GAME_LIST_LIMIT, EU_GET_GAMES_OPTIONS, EU_GET_GAMES_URL } from '../utils/constants';\nimport type { EURequestOptions, GameEU } from '../utils/interfaces';\nimport { makeURLSearchParams } from '../utils/makeURLSearchParams';\nimport { EshopError } from '../utils/utils';\n\n/**\n * Fetches all games on the European, Australian or New Zealand eShops\n *\n * @remarks\n * Games from Australia / New Zealand can be limited. They are included only as much as that Nintendo assigns them properly to the PAL region\n *\n * @param options - Request options to pass to the eShop request {@link EURequestOptions | See EURequestOptions for details}\n * @returns Promise containing all requested EU/PAL games\n */\nexport async function getGamesEurope(options: EURequestOptions = { limit: EU_GAME_LIST_LIMIT, locale: EU_DEFAULT_LOCALE }): Promise<GameEU[]> {\n\tif (!options.limit) options.limit = EU_GAME_LIST_LIMIT;\n\tif (!options.locale) options.locale = EU_DEFAULT_LOCALE;\n\n\tconst url = new URL(EU_GET_GAMES_URL.replace('{locale}', options.locale));\n\turl.search = makeURLSearchParams({\n\t\trows: options.limit,\n\t\t...EU_GET_GAMES_OPTIONS\n\t}).toString();\n\n\tconst gamesData = await Result.fromAsync(fetch<{ response: { docs: GameEU[] } }>(url, FetchResultTypes.JSON));\n\n\tif (gamesData.isErr()) {\n\t\tthrow new EshopError('Fetching of EU Games failed');\n\t}\n\n\treturn gamesData.unwrap().response.docs;\n}\n","import { fetch, FetchResultTypes } from '@sapphire/fetch';\nimport { Result } from '@sapphire/result';\nimport { XMLParser } from 'fast-xml-parser';\nimport { JP_GET_GAMES_URL } from '../utils/constants';\nimport type { GameJP } from '../utils/interfaces';\nimport { EshopError } from '../utils/utils';\n\nconst parser = new XMLParser();\n\n/**\n * Fetches all games on japanese eShops\n *\n * @returns Promise containing all the games\n */\nexport async function getGamesJapan(): Promise<GameJP[]> {\n\tconst response = await Result.fromAsync(fetch(JP_GET_GAMES_URL, FetchResultTypes.Text));\n\n\tif (response.isErr()) {\n\t\tthrow new EshopError('Fetching of JP Games failed');\n\t}\n\n\tconst gamesJP = Result.from(() => parser.parse(response.unwrap()));\n\n\tif (gamesJP.isErr()) {\n\t\tthrow new EshopError('Parsing of JP Games failed');\n\t}\n\n\treturn gamesJP.unwrap().TitleInfoList.TitleInfo as GameJP[];\n}\n","import { fetch, FetchResultTypes } from '@sapphire/fetch';\nimport { Result } from '@sapphire/result';\nimport {\n\tQUERIED_US_ALGOLIA_KEY_NEW,\n\tQUERIED_US_ALGOLIA_KEY_OLD,\n\tQUERIED_US_GET_GAMES_URL_NEW,\n\tQUERIED_US_GET_GAMES_URL_OLD,\n\tUS_ALGOLIA_HEADERS\n} from '../utils/constants';\nimport type { QueriedGameResult, QueriedGamesAmericaOptions, QueriedGameUS } from '../utils/interfaces';\nimport { EshopError } from '../utils/utils';\n\n/**\n * Fetches a subset of games from the American e-shops as based on a given query\n * @param query The query to search for\n * @param __namedParameters Additional options for the [[getQueriedGamesAmerica]] call. Defaults to `{ hitsPerPage: 200, page: 0 }`\n * @returns Promise containing the first `hitsPerPage` games that match your query\n * @license Apache-2.0 Jeroen Claassens & Aura Román\n * @copyright 2021\n */\nexport async function getQueriedGamesAmerica(\n\tquery: string,\n\t{ hitsPerPage = 200, page = 0 }: QueriedGamesAmericaOptions = { hitsPerPage: 200, page: 0 }\n): Promise<QueriedGameUS[]> {\n\tconst newGamesResult = await Result.fromAsync(\n\t\tfetch<QueriedGameResult>(\n\t\t\tQUERIED_US_GET_GAMES_URL_NEW,\n\t\t\t{\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t...US_ALGOLIA_HEADERS,\n\t\t\t\t\t'X-Algolia-API-Key': QUERIED_US_ALGOLIA_KEY_NEW\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\thitsPerPage,\n\t\t\t\t\tpage,\n\t\t\t\t\tquery\n\t\t\t\t})\n\t\t\t},\n\t\t\tFetchResultTypes.JSON\n\t\t)\n\t);\n\n\tif (newGamesResult.isErr() || newGamesResult.isOkAnd((v) => v.hits.length === 0)) {\n\t\tthrow new EshopError(`No game results for the query \"${query}\"`);\n\t}\n\n\tconst oldGamesResult = await Result.fromAsync(\n\t\tfetch<QueriedGameResult>(\n\t\t\tQUERIED_US_GET_GAMES_URL_OLD,\n\t\t\t{\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t...US_ALGOLIA_HEADERS,\n\t\t\t\t\t'X-Algolia-API-Key': QUERIED_US_ALGOLIA_KEY_OLD\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\thitsPerPage,\n\t\t\t\t\tpage,\n\t\t\t\t\tquery\n\t\t\t\t})\n\t\t\t},\n\t\t\tFetchResultTypes.JSON\n\t\t)\n\t);\n\n\tif (oldGamesResult.isErr() || oldGamesResult.isOkAnd((v) => v.hits.length === 0)) {\n\t\tthrow new EshopError(`No game results for the query \"${query}\"`);\n\t}\n\n\treturn enrichNewHitsWithOldHitData(newGamesResult.unwrap().hits, oldGamesResult.unwrap().hits);\n}\n\nfunction enrichNewHitsWithOldHitData(newHits: QueriedGameUS[], oldHits: QueriedGameUS[]) {\n\tfor (const newHit of newHits) {\n\t\tconst oldHitWithSameNsuid = oldHits.find((oldHit) => oldHit.nsuid === newHit.nsuid);\n\n\t\tif (!oldHitWithSameNsuid) continue;\n\n\t\tnewHit.boxart = oldHitWithSameNsuid.boxart;\n\t\tnewHit.developers = oldHitWithSameNsuid.developers;\n\t\tnewHit.freeToStart = oldHitWithSameNsuid.freeToStart;\n\t\tnewHit.generalFilters = oldHitWithSameNsuid.generalFilters;\n\t\tnewHit.horizontalHeaderImage = oldHitWithSameNsuid.horizontalHeaderImage;\n\t\tnewHit.howToShop = oldHitWithSameNsuid.howToShop;\n\t\tnewHit.lowestPrice = oldHitWithSameNsuid.lowestPrice;\n\t\tnewHit.msrp = oldHitWithSameNsuid.msrp ?? newHit.price?.regPrice;\n\t\tnewHit.salePrice = oldHitWithSameNsuid.salePrice ?? newHit.price?.salePrice;\n\t\tnewHit.featured = oldHitWithSameNsuid.featured ?? newHit.featuredProduct;\n\t\tnewHit.lastModified = oldHitWithSameNsuid.lastModified ?? newHit.updatedAt;\n\t\tnewHit.numOfPlayers = oldHitWithSameNsuid.numOfPlayers;\n\t\tnewHit.playerFilters = oldHitWithSameNsuid.playerFilters;\n\t\tnewHit._distinctSeqID = oldHitWithSameNsuid._distinctSeqID;\n\t}\n\n\treturn newHits;\n}\n","import { fetch, FetchResultTypes } from '@sapphire/fetch';\nimport { Result } from '@sapphire/result';\nimport { BR_ALGOLIA_HEADERS, QUERIED_BR_ALGOLIA_KEY, QUERIED_BR_GET_GAMES_URL } from '../utils/constants';\nimport type { QueriedGameResult, QueriedGamesAmericaOptions, QueriedGameUS } from '../utils/interfaces';\nimport { makeURLSearchParams } from '../utils/makeURLSearchParams';\nimport { EshopError } from '../utils/utils';\n\n/**\n * Fetches a subset of games from the Brazilian e-shop as based on a given query\n * @param query The query to search for\n * @param __namedParameters Additional options for the [[getQueriedGamesBrazil]] call. Defaults to `{ hitsPerPage: 200, page: 0 }`\n * @returns Promise containing the first `hitsPerPage` games that match your query\n * @license Apache-2.0 Jeroen Claassens & Aura Román\n * @copyright 2021\n */\nexport async function getQueriedGamesBrazil(\n\tquery: string,\n\t{ hitsPerPage = 200, page = 0 }: QueriedGamesAmericaOptions = { hitsPerPage: 200, page: 0 }\n): Promise<QueriedGameUS[]> {\n\tconst gamesResult = await Result.fromAsync(\n\t\tfetch<QueriedGameResult>(\n\t\t\tQUERIED_BR_GET_GAMES_URL,\n\t\t\t{\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t...BR_ALGOLIA_HEADERS,\n\t\t\t\t\t'X-Algolia-API-Key': QUERIED_BR_ALGOLIA_KEY\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tparams: makeURLSearchParams({\n\t\t\t\t\t\thitsPerPage,\n\t\t\t\t\t\tpage,\n\t\t\t\t\t\tquery\n\t\t\t\t\t}).toString()\n\t\t\t\t})\n\t\t\t},\n\t\t\tFetchResultTypes.JSON\n\t\t)\n\t);\n\n\tif (gamesResult.isErr() || gamesResult.isOkAnd((v) => v.hits.length === 0)) {\n\t\tthrow new EshopError(`No game results for the query \"${query}\"`);\n\t}\n\n\treturn gamesResult.unwrap().hits;\n}\n","import { regions } from 'country-data';\nimport { getShopsByCountryCodes } from '../other/getShopByCountryCode';\nimport { Region, US_GAME_CHECK_CODE } from '../utils/constants';\nimport type { EShop } from '../utils/interfaces';\n\n/**\n * Gets all active eShops on American countries.\n *\n * @remarks\n * This method will launch several requests at nintendo web services, so don't abuse it.\n *\n * @returns A list of shop objects with country code, name and default currency.\n */\nexport async function getShopsAmerica(): Promise<EShop[]> {\n\treturn getShopsByCountryCodes(\n\t\tregions.southAmerica.countries.concat(regions.centralAfrica.countries, regions.northernAmerica.countries),\n\t\tUS_GAME_CHECK_CODE,\n\t\tRegion.AMERICAS\n\t);\n}\n","import { Result } from '@sapphire/result';\nimport { countries, type Country } from 'country-data';\nimport type { Region } from '../utils/constants';\nimport type { EShop, PriceResponse } from '../utils/interfaces';\nimport { getPrices } from './getPrices';\n\n/**\n * Gets all active eShops given a list of countries.\n *\n * @param countryCodes A list of 2 digit country codes for every country eShop to lookup. (ISO 3166-1 alpha-2 country codes)\n * @param gameCode A 14 digits game NSUID from the desired region.\n * @param region A region id that will be appended in the final shop object for filtering purposes.\n * @returns A list of shop objects with country code, name and default currency.\n */\nexport async function getShopsByCountryCodes(countryCodes: string[], gameCode: string, region: Region): Promise<EShop[]> {\n\tconst countryList: Country[] = countryCodes.map((code: string) => countries.all.filter((country: Country) => country.alpha2 === code)[0]);\n\tconst shops: PriceResponse[] = [];\n\n\tfor (const country of countryList) {\n\t\tconst response = await Result.fromAsync(getPrices(country.alpha2, gameCode));\n\n\t\tif (response.isErr()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst unwrappedResponse = response.unwrap();\n\t\tunwrappedResponse.country = country;\n\t\tshops.push(unwrappedResponse);\n\t}\n\n\tconst activeShops = shops.filter((shop: PriceResponse) => shop && shop.prices && shop.prices.length && shop.prices[0].regular_price);\n\tconst eShops = activeShops.map((shop: PriceResponse) => ({\n\t\tcode: shop.country.alpha2,\n\t\tcountry: shop.country.name,\n\t\tcurrency: shop.prices[0].regular_price.currency,\n\t\tregion\n\t}));\n\n\tif (!eShops.length) throw new Error('ACTIVE_SHOPS_Rate_Limit');\n\n\treturn eShops;\n}\n","import { fetch, FetchResultTypes } from '@sapphire/fetch';\nimport { Result } from '@sapphire/result';\nimport { PRICE_GET_OPTIONS, PRICE_GET_URL, PRICE_LIST_LIMIT } from '../utils/constants';\nimport type { PriceResponse, TitleData } from '../utils/interfaces';\nimport { makeURLSearchParams } from '../utils/makeURLSearchParams';\nimport { EshopError } from '../utils/utils';\n\n/**\n * Gets pricing information for the requested games. Paginates every 50 games.\n *\n * @param country A two digit country code. (ISO 3166-1 alpha-2 country code)\n * @param gameIds One or more NSUID of the corresponding games.\n * @param offset _(Optional)_ The offset to start at\n * @param prices _(Optional)_ An array of {@link TitleData}\n * @returns A promise containing the pricing information.\n */\nexport async function getPrices(country: string, gameIds: string[] | string, offset = 0, prices: TitleData[] = []): Promise<PriceResponse> {\n\tconst filteredIds = gameIds.slice(offset, offset + PRICE_LIST_LIMIT);\n\n\tconst url = new URL(PRICE_GET_URL);\n\turl.search = makeURLSearchParams({\n\t\tcountry,\n\t\tids: filteredIds,\n\t\tlimit: PRICE_LIST_LIMIT,\n\t\t...PRICE_GET_OPTIONS\n\t}).toString();\n\tconst response = await Result.fromAsync(fetch<PriceResponse>(url, FetchResultTypes.JSON));\n\n\tif (response.isErr()) {\n\t\tthrow new EshopError('Fetching of eShop prices failed');\n\t}\n\n\tconst unwrappedResponse = response.unwrap();\n\n\tif (unwrappedResponse.prices && unwrappedResponse.prices.length + offset < gameIds.length) {\n\t\tconst accumulatedPrices = prices.concat(unwrappedResponse.prices);\n\n\t\treturn getPrices(country, gameIds, offset + PRICE_LIST_LIMIT, accumulatedPrices);\n\t} else if (unwrappedResponse.prices) {\n\t\tunwrappedResponse.prices = unwrappedResponse.prices.concat(prices);\n\n\t\treturn unwrappedResponse;\n\t}\n\n\treturn unwrappedResponse;\n}\n","import { regions } from 'country-data';\nimport { getShopsByCountryCodes } from '../other/getShopByCountryCode';\nimport { JP_GAME_CHECK_CODE, Region } from '../utils/constants';\nimport type { EShop } from '../utils/interfaces';\n\n/**\n * Gets all active eShops on Asian countries\n *\n * @remarks\n * This method will launch several requests at nintendo web services, so don't abuse it.\n *\n * @returns A list of shop objects with country code, name and default currency.\n */\nexport async function getShopsAsia(): Promise<EShop[]> {\n\treturn getShopsByCountryCodes(\n\t\tregions.southernAsia.countries.concat(\n\t\t\tregions.southernAsia.countries,\n\t\t\tregions.southeastAsia.countries,\n\t\t\tregions.eastAsia.countries,\n\t\t\tregions.westernAsia.countries\n\t\t),\n\t\tJP_GAME_CHECK_CODE,\n\t\tRegion.ASIA\n\t);\n}\n","import { regions } from 'country-data';\nimport { getShopsByCountryCodes } from '../other/getShopByCountryCode';\nimport { EU_GAME_CHECK_CODE, Region } from '../utils/constants';\nimport type { EShop } from '../utils/interfaces';\n\n/**\n * Gets all active eShops on European countries.\n *\n * @remarks\n * This method will launch several requests at nintendo web services, so don't abuse it.\n *\n * @returns A list of shop objects with country code, name and default currency.\n */\nexport async function getShopsEurope(): Promise<EShop[]> {\n\treturn getShopsByCountryCodes(\n\t\tregions.northernEurope.countries.concat(\n\t\t\tregions.southernEurope.countries,\n\t\t\tregions.easternEurope.countries,\n\t\t\tregions.westernEurope.countries,\n\t\t\tregions.australia.countries,\n\t\t\tregions.southernAfrica.countries\n\t\t),\n\t\tEU_GAME_CHECK_CODE,\n\t\tRegion.EUROPE\n\t);\n}\n","import type { EShop } from '../utils/interfaces';\nimport { getShopsAmerica } from './getShopsAmerica';\nimport { getShopsAsia } from './getShopsAsia';\nimport { getShopsEurope } from './getShopsEurope';\n\n/**\n * Gets all active eShops.\n *\n * @remarks\n * This method will launch several requests at nintendo web services, so don't abuse it.\n *\n * @returns A list of shop objects with country code, name and default currency.\n */\nexport async function getActiveShops(): Promise<EShop[]> {\n\ttry {\n\t\tconst shopsAmerica = await getShopsAmerica();\n\t\tconst shopsAsia = await getShopsAsia();\n\t\tconst shopsEurope = await getShopsEurope();\n\n\t\treturn shopsAmerica.concat(shopsAsia, shopsEurope);\n\t} catch (err) {\n\t\tthrow err as Error;\n\t}\n}\n","import { EU_GAME_CODE_REGEX, JP_GAME_CODE_REGEX, Region } from '../utils/constants';\nimport type { GameEU, GameJP, GameUS } from '../utils/interfaces';\nimport { EshopError } from '../utils/utils';\n\n/**\n * Parses the game code to extract the cross-region portion.\n *\n * @param game The game object returned from one of the other methods.\n * @param region Region code\n * @returns The 4-digit resulting game code\n */\nexport function parseGameCode(game: GameUS | GameEU | GameJP, region: Region): string | null {\n\tlet codeParse: RegExpExecArray | null;\n\n\tswitch (region) {\n\t\tcase Region.AMERICAS:\n\t\t\tthrow new EshopError(\n\t\t\t\t'`parseGameCode` is not possible for American games as the Nintendo API does not provide enough information to deduce the game code.'\n\t\t\t);\n\t\tcase Region.EUROPE:\n\t\t\tcodeParse = EU_GAME_CODE_REGEX.exec((game as GameEU).product_code_txt[0]);\n\t\t\tbreak;\n\t\tcase Region.ASIA:\n\t\t\tcodeParse = JP_GAME_CODE_REGEX.exec((game as GameJP).InitialCode);\n\t\t\tbreak;\n\t}\n\n\treturn codeParse && codeParse.length > 1 ? codeParse[1] : null;\n}\n","import { JP_NSUID_REGEX, Region } from '../utils/constants';\nimport type { GameEU, GameJP, GameUS } from '../utils/interfaces';\n\n/**\n * Extracts NSUID information from the game object.\n *\n * @param game The game object returned from one of the other methods.\n * @param region Region code\n * @returns The 14-digits NSUID\n */\nexport function parseNSUID(game: GameUS | GameEU | GameJP, region: Region): string | null {\n\tswitch (region) {\n\t\tcase Region.EUROPE:\n\t\t\treturn (game as GameEU).nsuid_txt ? (game as GameEU).nsuid_txt[0] : null;\n\t\tcase Region.ASIA:\n\t\t\tconst nsuidParse = JP_NSUID_REGEX.exec((game as GameJP).LinkURL);\n\n\t\t\treturn nsuidParse && nsuidParse.length > 0 ? nsuidParse[0] : null;\n\t\tdefault:\n\t\tcase Region.AMERICAS:\n\t\t\treturn (game as GameUS).nsuid;\n\t}\n}\n"]}